// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  googleId      String?   
  accessToken   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  worker        Worker?
  accounts      Account[]
  sessions      Session[]
  image         String?

}

model Worker {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique @db.ObjectId
  phoneNumber    String
  location       String
  bankName       String
  accountHolder  String
  accountNumber  String
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Order {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  houseType    String
  serviceType  String   // AÃ±adimos este campo
  calendarData Json
  location     String
  phoneNumber  String
  entryMethod  String
  comment      String?
  price        Float
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  provider           String
  providerAccountId  String
  type               String
  access_token       String?
  expires_at         Int?
  id_token           String?
  refresh_token      String?
  scope              String?
  token_type         String?
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

