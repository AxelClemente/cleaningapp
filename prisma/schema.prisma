// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  googleId      String?   
  accessToken   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  worker        Worker?
  accounts      Account[]
  sessions      Session[]
  image         String?
  orders        Order[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  properties   Property[]
  orderRequests OrderRequest[]
}

model Worker {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique @db.ObjectId
  phoneNumber    String
  location       String
  bankName       String
  accountHolder  String
  accountNumber  String
  profilePicture String?
  images         String[]
  description    String
  hourlyRate     Float
  rating         Float?   @default(0)
  reviewCount    Int?     @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  orders         Order[]  // Nueva relaci√≥n inversa
  orderRequests OrderRequest[]
}

model Order {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  worker       Worker?  @relation(fields: [workerId], references: [id])
  workerId     String?
  houseType    String
  serviceType  String
  calendarData Json
  location     String
  phoneNumber  String
  entryMethod  String
  comment      String?
  price        Float
  status       String
  images       String[]
  messages     Message[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  provider           String
  providerAccountId  String
  type               String
  access_token       String?
  expires_at         Int?
  id_token           String?
  refresh_token      String?
  scope              String?
  token_type         String?
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId  String   @db.ObjectId
  receiverId String  @db.ObjectId
  orderId   String   @db.ObjectId
  content   String
  timestamp DateTime @default(now())
  isRead    Boolean  @default(false)

  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
}

model Property {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  propertyName String
  propertyType String
  location     String
  imageUrl     String?
  entryMethod  String
  lockboxPass  String?
  comment      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orderRequests OrderRequest[]
}

model OrderRequest {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @db.ObjectId
  worker          Worker   @relation(fields: [workerId], references: [id])
  workerId        String   @db.ObjectId
  property        Property @relation(fields: [propertyId], references: [id])
  propertyId      String   @db.ObjectId
  propertyType    String
  selectedDate    DateTime
  serviceDuration Int
  pricePerHour    Float
  totalPrice      Float
  status          String   @default("pending")
  comment         String?
  imageUrl        String?
  entryMethod     String
  lockboxPass     String?
  location        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
